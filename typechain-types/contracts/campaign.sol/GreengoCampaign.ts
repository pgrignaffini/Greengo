/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace GreengoCampaign {
  export type DonationStruct = {
    donor: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type DonationStructOutput = [string, BigNumber, BigNumber] & {
    donor: string;
    timestamp: BigNumber;
    amount: BigNumber;
  };
}

export interface GreengoCampaignInterface extends utils.Interface {
  functions: {
    "claimFunds()": FunctionFragment;
    "donate(uint256)": FunctionFragment;
    "getAmountCollected()": FunctionFragment;
    "getDonationsCounter()": FunctionFragment;
    "getDonationsDetails(uint256)": FunctionFragment;
    "getGoalAmount()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimFunds"
      | "donate"
      | "getAmountCollected"
      | "getDonationsCounter"
      | "getDonationsDetails"
      | "getGoalAmount"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonationsCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonationsDetails",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGoalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "claimFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonationsCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonationsDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGoalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "DonationOccurred(address,uint256,uint256)": EventFragment;
    "FundsClaimed(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DonationOccurred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface DonationOccurredEventObject {
  _from: string;
  _id: BigNumber;
  _value: BigNumber;
}
export type DonationOccurredEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DonationOccurredEventObject
>;

export type DonationOccurredEventFilter =
  TypedEventFilter<DonationOccurredEvent>;

export interface FundsClaimedEventObject {
  _from: string;
  _value: BigNumber;
}
export type FundsClaimedEvent = TypedEvent<
  [string, BigNumber],
  FundsClaimedEventObject
>;

export type FundsClaimedEventFilter = TypedEventFilter<FundsClaimedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface GreengoCampaign extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GreengoCampaignInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAmountCollected(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDonationsCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDonationsDetails(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[GreengoCampaign.DonationStructOutput]>;

    getGoalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimFunds(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donate(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAmountCollected(overrides?: CallOverrides): Promise<BigNumber>;

  getDonationsCounter(overrides?: CallOverrides): Promise<BigNumber>;

  getDonationsDetails(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<GreengoCampaign.DonationStructOutput>;

  getGoalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimFunds(overrides?: CallOverrides): Promise<void>;

    donate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmountCollected(overrides?: CallOverrides): Promise<BigNumber>;

    getDonationsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getDonationsDetails(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<GreengoCampaign.DonationStructOutput>;

    getGoalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DonationOccurred(address,uint256,uint256)"(
      _from?: PromiseOrValue<string> | null,
      _id?: PromiseOrValue<BigNumberish> | null,
      _value?: null
    ): DonationOccurredEventFilter;
    DonationOccurred(
      _from?: PromiseOrValue<string> | null,
      _id?: PromiseOrValue<BigNumberish> | null,
      _value?: null
    ): DonationOccurredEventFilter;

    "FundsClaimed(address,uint256)"(
      _from?: PromiseOrValue<string> | null,
      _value?: null
    ): FundsClaimedEventFilter;
    FundsClaimed(
      _from?: PromiseOrValue<string> | null,
      _value?: null
    ): FundsClaimedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    claimFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAmountCollected(overrides?: CallOverrides): Promise<BigNumber>;

    getDonationsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getDonationsDetails(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGoalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAmountCollected(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDonationsCounter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDonationsDetails(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGoalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
